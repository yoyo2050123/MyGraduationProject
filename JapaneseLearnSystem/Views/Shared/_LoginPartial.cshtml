@* 這個 Partial 專門負責導覽列右邊的登入區塊 *@
@* 未登入：顯示「註冊」「登入」；已登入：顯示「你好，用戶名」與「登出」 *@
@inject dbJapaneseLearnSystemContext _context

<ul class="navbar-nav ms-auto">
    @* 檢查使用者是否已登入 *@
    @if (User?.Identity?.IsAuthenticated ?? false)
    {
        <li class="nav-item">
            @{
                string displayName = "會員";

                var memberIdClaim = User.FindFirst("MemberID")?.Value;
                @* FindFirst是尋找第一筆資料，Claim裡有很多筆資料，
                但是一但登入後Claim就會把MemberID蓋上去你登入的ID *@
                if (!string.IsNullOrEmpty(memberIdClaim))
                {
                    var member = _context.Member.FirstOrDefault(m => m.MemberID == memberIdClaim);
                    if (member != null)
                    {
                        displayName = member.Name;
                    }
                }
            }
            <span class="nav-link">こんにちは、@displayName さん</span>
        </li>

        <li class="nav-item">
            @* 登出要用 POST + AntiForgery，比較安全 *@
            <form class="d-inline" asp-area="" asp-controller="Account" asp-action="Logout" method="post">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-outline-secondary btn-sm">登出</button>
            </form>
        </li>
    }
    else
    {
        @* ------------------- 未登入狀態 ------------------- *@
        <li class="nav-item">
            <a class="nav-link" asp-area="" asp-controller="Account" asp-action="Register">註冊</a>
        </li>
        <li class="nav-item">
            <a class="btn btn-primary btn-sm ms-2" asp-area="" asp-controller="Account" asp-action="Login">登入</a>
        </li>
    }
</ul>
